@use "../../functions/string-ends-with" as *;
@use "../../functions/get-color-map-name" as *;
@use "../../mixins/props-all-or-ends-with" as *;

@mixin get-colors($color-name, $start, $end, $type) {
    $color-map: getColorMapName($color-name, $type);
    
    @if $color-map != null {
        @for $i from $start through $end {
            @if($type == 'hsl') {
                --op-#{$color-name}-#{$i}-hsl: #{map-get($color-map, 'op-#{$color-name}-' + $i + '-hsl')};
            } @else if($type == 'oklch') {
                --op-#{$color-name}-#{$i}-oklch: #{map-get($color-map, 'op-#{$color-name}-' + $i + '-oklch')};
            }
        }
    }
}

@mixin output-colors($includes, $type) {
    @if($type == 'hsl' or $type == 'oklch') {
        @each $color in $includes {
            $color-name: nth($color, 1);
            $tupleLength: length($color);
            $color-map: getColorMapName($color-name, $type);
            /// Output all if just color name        
            @if $tupleLength == 1 {
                @if $color-map != null {
                    @include get-colors($color-name, 0, (length($color-map) - 1), $type);
                }
            } 
            /// Output entry of each tuple
            @else if $tupleLength > 1 {
                @for $entry from 2 to ($tupleLength + 1) {
                    $check: if($type == 'hsl', '-' + nth($color, $entry) + '-hsl', '-' + nth($color, $entry) + '-oklch');
                    @each $key, $val in $color-map {
                        @if(ends-with($key, $check)) {
                            --#{$key}: #{$val};
                        }                
                    }
                }
                
            }
        }    
    }
}

@mixin output-dynamic-colors($include-map, $prop-map) {
    @include props-all-or-ends-with($include-map, $prop-map);
}