:where(html) {
  --root-areas:
  "main-header main-header main-header"
  "main-area main-area main-area"
  "main-footer main-footer main-footer";
}
:where(html):has(.admin-header) {
  --root-areas: "admin-header admin-header admin-header"
  "main-header main-header main-header"
  "main-area main-area main-area"
  "main-footer main-footer main-footer";
}
:where(html):has(.main-aside:not(:empty)) {
  --end-col: 0;
  --root-areas:
  "main-header main-header main-header"
  "inline-start-area main-area inline-end-area"
  "main-footer main-footer main-footer";
}

@layer components {
  #__nuxt {
    display: grid;
    grid-template-areas: var(--root-areas);
    grid-template-columns: var(--grid-wrapper-columns);
  }
  .main-header {
    display: grid;
    grid-area: main-header;
    grid-template-areas: "inline-start-block-start-area block-start-area inline-end-block-start-area" "inline-start-area main-area inline-end-area" "inline-start-block-end-area block-end-area inline-end-block-end-area";
    grid-auto-flow: column;
    grid-template-columns: var(--grid-wrapper-columns);
    z-index: 1;
  }
  :where(.main-header__inner) > * {
    grid-area: main-area;
  }
  .main-header__inner {
    display: contents;
  }
  :where(html):has(:not(.main-aside)) .main-area {
    display: grid;
    grid-template-columns: var(--grid-wrapper-columns);
  }
  :where(html):has(:not(.main-aside)) .main-area > * {
    grid-column: 2/2;
  }
  .main-area {
    grid-area: main-area;
  }
  .main-aside {
    grid-area: inline-start-area;
  }
  @keyframes menu-show-from-left {
    0% {
      display: none;
    }
    1% {
      display: grid;
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(0%);
    }
  }
  @keyframes menu-hide-from-left {
    0% {
      display: grid;
      transform: translateX(0%);
    }
    99% {
      display: none;
    }
    100% {
      transform: translateX(-100%);
    }
  }
  .navigation {
    margin-block: 0;
    padding: max(var(--space-xs), var(--spacing-1));
    display: grid;
    grid-template-columns: auto 1fr;
    gap: var(--spacing-gutter) var(--spacing-gutter-xl);
    align-items: center;
    flex: 1 1 auto;
    grid-area: main-area;
  }
  .navigation:has(> *:only-child) {
    grid-template-columns: 1fr;
  }
  .navigation:has(> *:nth-child(3):last-child) {
    grid-template-columns: auto 1fr auto;
  }
  .navigation[data-nav-layout=stacked] .navigation__menu {
    grid-column: 1/-1;
  }
  .navigation[data-nav-layout=stacked-centered] .navigation__brand {
    grid-column: 1/-1;
    justify-content: center;
  }
  .navigation[data-nav-layout=stacked-centered] .navigation__menu {
    grid-column: 1/-1;
    justify-content: center;
  }
  .navigation[data-nav-layout=centered] .navigation__menu {
    justify-content: center;
  }
  .navigation a:not(.btn) {
    text-decoration: none;
    padding: var(--spacing-rel-2) var(--spacing-rel-2_5);
    width: fit-content;
    color: var(--color-primary);
    border-radius: min(var(--radius), var(--space-2xs));
  }
  .navigation a:not(.btn) span {
    border-bottom: 2px solid transparent;
  }
  .navigation a:not(.btn):hover {
    background-color: var(--color-grey-1);
  }
  .navigation a:not(.btn)[aria-current] span {
    border-bottom-color: var(--color-accent);
  }
  .navigation__brand {
    display: inline-flex;
    align-items: baseline;
    gap: 0.25em;
    font-weight: bold;
    font-size: 1.25rem;
    text-decoration: none;
    height: var(--main-header-logo-height, 64px);
    grid-row: 1/1;
    grid-column: 1/1;
  }
  .navigation__brand svg {
    width: auto;
    height: 100%;
  }
  .navigation__brand span {
    /* Inclusively hidden so it is still read as a label by assistive tech */
    height: 1px;
    overflow: hidden;
    position: absolute;
    clip-path: inset(50%);
    font-size: inherit;
    line-height: 0;
  }
  .navigation__menu :is(button, a) {
    letter-spacing: 0.03em;
    font-weight: 600;
    color: var(--color-primary);
  }
  .navigation__menu button {
    z-index: 1;
    margin-inline: auto 0;
  }
  .navigation__menu__menu {
    gap: 0.5rem;
    position: absolute;
    top: 0;
  }
  .navigation__actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  .navigation {
    container: navigation/inline-size;
  }
  .navigation__menu {
    container: menu/inline-size;
    display: flex;
  }
  :where(.navigation__menu) {
    align-self: stretch;
    justify-content: flex-start;
    align-items: center;
  }
  @container navigation (inline-size >= 55ch) {
    .navigation__brand span {
      height: auto;
      overflow: unset;
      position: unset;
      clip-path: unset;
      line-height: unset;
    }
  }
  @container navigation (inline-size >= 60ch) {
    .navigation__menu button {
      display: none;
    }
    .navigation__menu__menu {
      position: relative;
      display: flex;
      --nav-menu-bg: var(--nav-menu-show-bg, transparent);
    }
  }
  .navigation__menu:has(:nth-child(6)) {
    --show-menu: true;
  }
  @container navigation (40ch <= inline-size <= 60ch) {
    .navigation:not([data-show-menu]) .btn:where([aria-expanded=false]) + .navigation__menu__menu {
      display: none;
      animation: var(--menu-hide, menu-hide-from-left) 500ms ease-in forwards;
    }
    .navigation:not([data-show-menu]) .btn:where([aria-expanded=true]) + .navigation__menu__menu {
      animation: var(--menu-show, menu-show-from-left) 500ms ease-in forwards;
    }
    .navigation:not([data-show-menu]) .navigation__menu {
      display: contents;
    }
    .navigation:not([data-show-menu]) .navigation__menu__menu {
      height: 100dvh;
      width: 100vw;
      margin-inline: calc(-50vw + 50%);
      top: 0;
      display: grid;
      place-content: center;
      background: var(--nav-menu-bg, var(--nav-menu-hide-bg, var(--color-accent)));
    }
  }
}
@layer components {
  :where(.btn, button) {
    --button-color-hover: color-mix(in oklch, var(--button-color-hover-mix-base, var(--button-color)) var(--button-color-hover-mix-base-strength, 75%), var(--button-color-hover-mix-into, white) var(--button-color-hover-mix-into-strength, 25%));
    --button-bg-hover: color-mix(in oklch, var(--button-bg-hover-mix-base, var(--button-bg)) var(--button-bg-hover-mix-base-strength, 90%), var(--button-bg-hover-mix-into, black) var(--button-bg-hover-mix-into-strength, 10%));
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: var(--button-p, var(--text-frame-y) var(--text-frame-x));
    border: none;
    background-color: var(--button-bg, var(--color-primary));
    border-radius: var(--button-radius, var(--radius));
    font-weight: var(--button-weight, 500);
    font-size: var(--button-font-size, inherit);
    cursor: pointer;
    color: var(--button-color, var(--color-primary-text));
    letter-spacing: var(--button-letter-spacing, 0.03em);
    --button-bg: var(--color-grey-2);
    --button-color: var(--color-grey-15);
  }
  :where(.btn, button):hover {
    color: var(--button-color-hover);
    background-color: var(--button-bg-hover);
  }
  .btn-neutral {
    --button-bg: var(--color-grey-12);
    --button-color: var(--color-grey-2);
  }
  .btn-primary {
    --button-bg: var(--color-primary);
    --button-color: var(--color-primary-text);
  }
  .btn-primary.btn-link {
    --button-color: var(--color-primary);
  }
  .btn-secondary {
    --button-bg: var(--color-secondary);
    --button-color: var(--color-secondary-text);
  }
  .btn-accent {
    --button-bg: var(--color-accent);
    --button-color: var(--color-accent-text);
  }
  .btn-ghost {
    --button-bg: transparent;
    --button-color: var(--color-grey-15);
  }
  .btn-link {
    --button-bg: transparent;
    --button-color: var(--color-grey-15);
    text-decoration: underline;
    --button-bg-hover: transparent;
  }
  .btn-circle {
    height: 3rem;
    width: 3rem;
    border-radius: 9999px;
    padding: 0;
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link) {
    outline: 1px solid currentColor;
    --button-bg: transparent;
    --button-bg-hover: var(--button-color);
    --button-color: var(--color-grey-12);
    --button-color-hover: var(--color-grey-2);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-primary {
    --button-color: var(--color-primary);
    --button-color-hover: var(--color-primary-text);
    --button-bg-hover: var(--color-primary);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-secondary {
    --button-color: var(--color-secondary);
    --button-color-hover: var(--color-secondary-text);
    --button-bg-hover: var(--color-secondary);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-accent {
    --button-color: var(--color-accent);
    --button-color-hover: var(--color-accent-text);
    --button-bg-hover: var(--color-accent);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-neutral {
    --button-color: var(--color-grey-12);
    --button-color-hover: var(--color-grey-2);
  }
}
@layer components {
  :where(.card, .p-card) {
    --card-two-columns: var(--card-left-col, 1fr) var(--card-right-col, 1fr);
    --card-gutter-stacked: var(--spacing-gutter);
    grid-template-columns: var(--card-columns, 1fr);
    background-color: var(--card-bg, var(--color-surface-bg));
    position: relative;
    border: var(--field-border-width, 1px) solid var(--field-border-color);
    border-radius: var(--card-radius, var(--radius));
    height: 100%;
    gap: var(--card-gutter, var(--card-gutter-stacked));
    aspect-ratio: var(--card-aspect, none);
    display: grid;
    padding: var(--card-p, var(--spacing-card, clamp(var(--spacing-sm), 8cqi, var(--spacing-xl))));
  }
  :where(.card, .p-card) :is(h2, h3):not(.heading) {
    text-wrap: balance;
  }
  :where(.card, .p-card):focus-within {
    outline: 3px solid var(--color-surface-bg-interact);
    outline-offset: -6px;
  }
  :where(.card, .p-card).image-full {
    display: grid;
    grid-template: 1fr/1fr;
    height: auto;
  }
  :where(.card, .p-card).image-full :is(.card-picture, header) {
    height: 100%;
  }
  :where(.card, .p-card) a {
    text-decoration: none;
    font-size: inherit;
  }
  :where(.card, .p-card) a:focus-visible {
    --outline-color: transparent;
  }
  :where(.card, .p-card) a:not(.button)::before {
    content: "";
    position: absolute;
    inset: 0;
  }
  :where(.card-title, .p-card-title) {
    --heading-line-height: 1.2;
    --fs-max: 1rem;
    font-size: var(--heading-font-size, var(--fs-max));
    color: var(--heading-color, var(--color-surface-text));
    font-weight: var(--heading-font-weight, bold);
    text-transform: var(--heading-text-transform, none);
    font-family: var(--heading-font-family, inherit);
    letter-spacing: var(--heading-letter-spacing, normal);
    line-height: var(--heading-line-height);
    text-wrap: balance;
    --heading-fs-fluid-viewport: 1vi;
    --heading-line-height: 1.166;
    --fs-min: var(--heading-xs-fs-min);
    --fs: var(--heading-xs-font-size);
    --heading-font-size: var(--heading-xs-font-size);
  }
  :where(.card-title, .p-card-title).fluid {
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    :where(.card-title, .p-card-title) {
      --fs-fluid: var(--heading-xs-fs-fluid);
    }
  }
  :where(.card-subtitle, .p-card-subtitle) {
    --heading-line-height: 1.2;
    --fs-max: 1rem;
    font-size: var(--heading-font-size, var(--fs-max));
    color: var(--heading-color, var(--color-surface-text));
    font-weight: var(--heading-font-weight, bold);
    text-transform: var(--heading-text-transform, none);
    font-family: var(--heading-font-family, inherit);
    letter-spacing: var(--heading-letter-spacing, normal);
    line-height: var(--heading-line-height);
    text-wrap: balance;
    --flow-space: var(--spacing-rel-1_5);
  }
  :where(.card-subtitle, .p-card-subtitle).fluid {
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  :where(.card-picture, .p-card-header) {
    align-self: stretch;
  }
  :where(.card-picture, .p-card-header) img {
    height: 100%;
    object-fit: cover;
  }
  @container (inline-size > 80ch) {
    :where(.card, .p-card) {
      --card-gutter: var(--card-gutter-cols-gutter, var(--spacing-gutter-xl));
      aspect-ratio: 4/3;
      max-width: 100%;
    }
  }
  :where(.card-body, .p-card-body, .p-card-caption, .p-card-content, .p-card-footer) > * + * {
    margin-top: var(--flow-space, 1em);
  }
  @container (inline-size > 35ch) {
    :where(.card, .p-card):not([class*=card--side]) {
      grid-auto-flow: column;
      align-items: center;
      justify-content: start;
      aspect-ratio: unset;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
      grid-auto-flow: row;
    }
    :where(.card-picture, .p-card-header) {
      order: -1;
    }
    :where(.card-picture, .p-card-header) img {
      width: 100%;
    }
  }
  @container (inline-size > 80ch) {
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
      --card-columns: var(--card-two-columns);
      --card-gap: calc(var(--card-p) * 2);
      grid-auto-flow: column;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-picture, .p-card-header):first-child + :is(.card-body, .p-card-body)) {
      --card-left-col: 0.6fr;
      --card-right-col: 0.4fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .header)) {
      --card-left-col: 0.4fr;
      --card-right-col: 0.6fr;
    }
    :where(.card-picture, .p-card-header) {
      order: initial;
    }
  }
  :is(.card, .p-card).card--stacked {
    --card-columns: 1fr;
    --card-gutter: var(--card-gutter-stacked);
    grid-auto-flow: row;
  }
}
@layer components {
  :where(.c-header-main).fixed + main .hero-content__text {
    padding-block-start: calc(var(--header-min-h) + var(--layout-gap));
  }
  :where(.c-header-main).fixed + main .hero--min-h-screen {
    --hero-min-h: min(1000px, 100dvb);
  }
  .hero--min-h-screen {
    --hero-min-h: min(1000px, calc(100dvb - var(--header-min-h)));
  }
  .hero--full-overlay {
    grid: 1fr/1fr;
  }
  .hero--full-overlay .hero-content {
    display: grid;
    grid: 1fr/1fr;
  }
  .hero--full-overlay :is(.hero__container, .hero__content, .hero-content__text, .hero-content__image) {
    grid-column: 1/1;
    grid-row: 1/1;
  }
  .hero--full-overlay .hero-content__text {
    z-index: 1;
    width: 100%;
    height: 100%;
  }
  .hero--full-overlay .hero-content__image {
    width: 100vw;
    margin-inline: calc(-50vw + 50%);
    position: absolute;
    height: 100%;
    max-height: 100%;
  }
  .hero--full-overlay .hero-content__image img {
    width: 100%;
  }
  :where(.hero--full-overlay) .hero-content__text {
    text-align: center;
  }
  :where(.hero--full-overlay) *:has(> .button) {
    justify-content: center;
  }
  .hero--top-down .hero-content__container {
    flex-direction: column;
    flex-wrap: nowrap;
  }
  .hero--top-down .hero-content {
    --layout-column-min: 100%;
  }
  .hero--top-down .hero-content__text {
    container: none;
    flex-grow: 1;
    padding-block-start: calc(var(--layout-gap) * 2);
  }
  .hero--top-down .hero-content__text:has(+ *) {
    padding-block-end: 0;
  }
  .hero--top-down .hero-content__text:has(+ *) {
    padding-block-end: 0;
  }
  :where(.hero--top-down) .hero-content__text {
    text-align: center;
  }
  :where(.hero--top-down) *:has(> .button) {
    justify-content: center;
  }
  .hero {
    display: grid;
    position: relative;
    aspect-ratio: var(--hero-aspect, 16 / 7);
    background-color: var(--hero-bg, var(--color-surface-bg));
  }
  .hero .navigation__brand {
    font-size: 4rem;
  }
  .hero .navigation__brand span {
    all: unset;
  }
  .hero__container {
    height: 100%;
  }
  .hero-content {
    position: relative;
  }
  :is(.hero, .hero__container, .hero-content) {
    display: grid;
  }
  :is(.hero__container, .hero__content, .hero__content > *) {
    flex: 1 1 auto;
  }
  .hero-content__container {
    --flex-grid-min: 45ch;
  }
  .hero-content__text {
    padding-block: var(--layout-gap);
  }
  .hero-content__image {
    display: flex;
    justify-content: center;
  }
  :where(.hero-content__image img) {
    object-fit: cover;
  }
  @container layout-container (inline-size < 120ch) {
    .hero-content {
      --layout-column-min: 100%;
    }
    .hero-content__text:has(+ *) {
      padding-block-start: 0;
    }
  }
  @container layout-container (inline-size > 120ch) {
    .hero-content__text {
      --flex-grid-min: 65ch;
      flex-grow: 0;
    }
  }
}
.quote {
  display: flex;
  align-items: flex-start;
  gap: var(--spacing-gutter-sm);
  --heading-line-height: 1.2;
  --fs-max: 1rem;
  font-size: var(--heading-font-size, var(--fs-max));
  color: var(--heading-color, var(--color-surface-text));
  font-weight: var(--heading-font-weight, bold);
  text-transform: var(--heading-text-transform, none);
  font-family: var(--heading-font-family, inherit);
  letter-spacing: var(--heading-letter-spacing, normal);
  line-height: var(--heading-line-height);
  text-wrap: balance;
  --fs-min: var(--heading-xxs-fs-min);
  --fs: var(--heading-xxs-font-size);
  --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  font-size: var(--heading-font-size);
}
.quote.fluid {
  --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
}
@supports (font-size: 1cqi) {
  .quote {
    --fs-fluid: var(--heading-xxs-fs-fluid);
  }
}

.quote img {
  aspect-ratio: 1/1;
  border-radius: 50%;
  width: clamp(4rem, 30%, 6rem);
  flex-shrink: 0;
  object-fit: cover;
}

.quote q {
  quotes: none;
}
